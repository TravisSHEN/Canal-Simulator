# Reflection of Project Canal Simulator
Author: Litao Shen 370439
## Introduction

The system to be implemented in this project is a simulator of a circular canal with a lock, which simulating the process of canal that letting vessels coming from downstream via lock to upstream of canal. In order to implement the simulator for canal, the concept of concurrency programming that allowing multiple threads to process at the same time is mainly used. 


## Evaluation of success for implementation

The implementation of the system is overall successful by overlooking the results from implemented simulator that allowing vessels ( the number of vessels must be under or equal the number of sections ), which generated by Producer, enter lock one by one by a exponential distribution time interval of ARRIVAL_TIME from downstream by draining the water in lock, and then fills water by operator to let vessels passed into first section by a launch tug boat. 

The movement of vessels in canal that divided into several sections is via tug boats between section and successor section. By looking into results of simulation, vessels in canal can be moved via tug boats through all sections by a TOWING_AWAY time. And when there are multiple vessels in canal, when one vessel need to move to next section, it will check if next section is empty and wait until the section to be empty and then move in. After moving through all sections, the vessel arrives back at the lock if lock is filled by Operator and unoccupied, then it will move in and get down to downstream by drain water. 

Moreover, the chamber automatically fills or drains by Operator for random operate_lapse when there is no vessel in lock so that lock can allow next coming vessel either from canal or from outside of canal.

However, the shortage of the implementation is that it only allow one direction in canal, which is not realistic enough to simulate the process of a canal that allowing vessels coming from both way.  


## Design of simulator
The main decision in implementing concurrency programming concept is using monitor that allowing the object to be locked when a thread is processing it so that the concurrency problems like mutual exclusion, deadlock, starvation and livelock can be easily solved. By using monitor for threads, according to which
objects are processed in the thread, then use these objects as monitor and carefully design the condition that cause thread to wait until waken up again and run by other threads once they release the object. For example, when Producer thread is processing Lock object, we use Lock as monitor and lock up this lock object so that other threads like Return_tug, Launch_tug threads cannot process "lock" object at the same which avoid memory inconsistence problem. Moreover, by using keywords "synchronized" for methods and "volatile" for variables in Object Lock and Section that satisfy mutual exclusion that only one thread is active at its critical section at a time.

Moreover, using monitor that control which threads are waiting or active can be more efficient and safe since threads don't need to keep running if their conditions of process are not satisfied. And this can avoid deadlock and starvation of multiple threads that threads can finally succeed in their critical sections when satisfying conditions at beginning.

## Summary
Implementing simulator for any real process by enter parameters can let us to easily examine what will happen during process. By using example of canal simulator, the behaviour of process for canal can be replicated in simulator as well as the unexpected situation like traffic jam in canal can also be examined in simulation. 
Furthermore, the solution of these problems can be expected and try to come up with solutions to avoid any unexpected things happen in real world. 

